generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  client
  assistant
  technician
  administrator
  owner
}

enum UserProfile {
  guest
  consumer
  member
  master
}

model Member {
  id String @id @default(cuid())

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Date

  softDeleted Boolean? @default(false) @map("soft_deleted")
  active      Boolean? @default(true)

  role MemberRole? @default(client)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([organizationId, userId])
  @@map("members")
}

model Organization {
  id String @id @default(cuid())

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Date

  softDeleted Boolean? @default(false) @map("soft_deleted")
  active      Boolean? @default(true)

  authorizationKey String? @map("authorization_key")
  name             String?
  image            String?
  email            String? @unique
  phone            String? @unique
  document         String  @unique

  zipCode    String?
  street     String?
  complement String?

  latitude  Float? @db.DoublePrecision
  longitude Float? @db.DoublePrecision

  members      Member[]
  subscription Subscription?

  @@map("organizations")
}

model Subscription {
  id String @id @default(cuid())

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Date

  organizationId String       @unique @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  softDeleted Boolean? @default(false) @map("soft_deleted")
  active      Boolean? @default(true)

  paymentCustomerId     String? @unique @map(name: "payment_customer_id")
  paymentSubscriptionId String? @unique @map(name: "payment_subscription_id")
  paymentPriceId        String? @map(name: "payment_price_id")

  credit Int? @default(100)

  unlimited Boolean? @default(false)

  @@map("subscriptions")
}

model User {
  id String @id @default(cuid())

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") @db.Date

  softDeleted Boolean? @default(false) @map("soft_deleted")
  active      Boolean? @default(true)
  available   Boolean? @default(false)

  profile UserProfile? @default(guest)

  accessCode String?
  passHash   String? @unique

  name     String?
  image    String?
  email    String? @unique
  phone    String? @unique
  document String? @unique

  zipCode    String?
  street     String?
  complement String?

  latitude  Float? @db.DoublePrecision
  longitude Float? @db.DoublePrecision

  organizations Member[]

  @@map("users")
}
